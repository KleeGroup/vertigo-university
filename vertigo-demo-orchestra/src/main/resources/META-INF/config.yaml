---
boot:
  params:
    locales: fr_FR
  plugins:
    - io.vertigo.core.plugins.resource.classpath.ClassPathResourceResolverPlugin: {}
    - io.vertigo.core.plugins.resource.local.LocalResourceResolverPlugin: {}
    - io.vertigo.core.plugins.resource.url.URLResourceResolverPlugin: {}
    - io.vertigo.vega.plugins.webservice.servlet.WebAppContextParamPlugin: {}
    - io.vertigo.core.plugins.param.xml.XmlParamPlugin:
        url : "/META-INF/application-config.xml" 
modules:
  io.vertigo.commons.CommonsFeatures:
    features:
      - script:
      - cache:
    featuresConfig:
      - script.janino:
      - cache.memory:
  io.vertigo.database.DatabaseFeatures:
    features:
      - sql:
    featuresConfig:
      - sql.datasource:
          classname: ${boot.db.classname}
          source: ${boot.db.source}
          name: orchestra
  io.vertigo.dynamo.DynamoFeatures:
    features:
      - store:
      - kvStore:
    featuresConfig:
      - store.data.sql:
          dataSpace: orchestra
          connectionName: orchestra
      - kvStore.delayedMemory:
          collections: flowers
          timeToLiveSeconds: 5
  io.vertigo.account.AccountFeatures:
    features:
      - security:
          userSessionClassName: io.vertigo.orchestra.ui.user.OrchestraUserSession
  io.vertigo.vega.VegaFeatures:
    features:
        - webservices:
    featuresConfig:
        - webservices.token:
            tokens: orchestra-demo
        - webservices.rateLimiting:
        - webservices.security:
        - webservices.apiPrefix:
            apiPrefix: /api
  io.vertigo.orchestra.OrchestraFeatures:
    featuresConfig:
      - orchestra.memory:
          workersCount: 5
      - orchestra.database:
          nodeName: ${boot.nodeName}
          daemonPeriodSeconds: ${boot.timerPeriod}
          workersCount: ${boot.workersCount}
          forecastDurationSeconds: ${boot.forecastDuration}
      - orchestra.webapi:
initializers:
  - io.vertigo.orchestra.ui.OrchestraProcessInitializer:
